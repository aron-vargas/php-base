<?php

class BaseClass
{
    public $pkey;
    protected $db_table;
    protected $field_array = array();

    public function __construct($id = null)
    {
        $this->pkey = $id;
        $this->SetFieldArray();
        $this->Load();
    }

    public function BindValues(&$sth)
    {
        $i = 1;

        foreach($this->field_array as $field)
        {
            $val = $this->Val($field);
            $sth->bindValue($i++, $val, $field->Type($val));
        }

        if ($this->pkey)
            $sth->bindValue($i++, $this->pkey, PDO::PARAM_INT);

        return $i;
    }

    static public function Clean($param)
    {
        return strip_tags(trim($param));
    }

    public function Copy($assoc)
    {
        if (is_array($assoc))
        {
            foreach($assoc AS $key => $val)
            {
                if ($key == 'db_table')
                    continue;
                else if (@property_exists($this, $key))
                    $this->{$key} = $val;
            }
        }
    }

    /**
     * @param string
     * @param mixed
     * @throws PDOException
     */
    public function change($field, $value)
    {
        global $dbh;

        if (is_int($value))
            $val_type = PDO::PARAM_INT;
        else if (is_bool($value))
            $val_type = PDO::PARAM_BOOL;
        else if (is_null($value))
            $val_type = PDO::PARAM_NULL;
        else if (is_string($value))
            $val_type = PDO::PARAM_STR;
        else
          $val_type = false;

        $field = trim($field);

        $sth = $dbh->prepare("UPDATE {$this->db_table} SET {$field} = ? WHERE pkey = ?");
        $sth->bindValue(1, $value, $val_type);
        $sth->bindValue(2, $this->pkey, PDO::PARAM_INT);
        $sth->execute();

        $this->{$field} = $value;
    }

    public function delete()
    {
        global $dbh;

        $sth = $dbh->query("SELECT * FROM {$this->db_table} WHERE pkey = {$this->pkey}");
        $sth->bindValue(1, $this->pkey, PDO::PARAM_INT);
        $sth->execute();
    }

    public function db_insert()
    {
        global $dbh;

        $fields = "";
        $holders = "";
        foreach($this->field_array as $field)
        {
            $fields .= " {$field->Name()},";
            $holders .= " ?,";
        }

        # remove trailing ','
        $fields = substr($fields, 0, -1);
        $holders = substr($holders, 0, -1);

        $sth = $dbh->prepare("INSERT INTO {$this->db_table} ({$fields}) VALUES ($holders)");
        $this->BindValues($sth);
        $sth->execute();

        # Get id for autogenerated fields
        $this->pkey = $dbh->lastInsertId();

        return $this->pkey;
    }

    public function db_update()
    {
        global $dbh;

        $fields = "";
        foreach($this->field_array as $field)
        {
            $fields .= " {$field->Name()} = ?,";
        }

        # remove trailing ','
        $fields = substr($fields, 0, -1);

        $sth = $dbh->prepare("UPDATE {$this->db_table} SET {$fields} WHERE pkey = ?");
        $this->BindValues($sth);
        $sth->execute();
    }

    public function Load()
    {
        global $dbh;

        if ($this->pkey)
        {
            $sth = $dbh->prepare("SELECT * FROM {$this->db_table} WHERE pkey = ?");
            $sth->bindValue(1, $this->pkey, PDO::PARAM_INT);
            $sth->execute();
            $rec = $sth->fetch(PDO::FETCH_ASSOC);
            $this->Copy($rec);
        }
    }

    private function SetFieldArray()
    {
        $this->field_array = array();
    }

    public function Val($db_field)
    {
        $val = null;

        if (@property_exists($this, $db_field->name))
        {
            $val =  $this->{$db_field->name};

            if ($db_field->max_length)
                $val = substr($val, 0, $db_field->max_length);
        }

        return $val;
    }
}
