<?php
/**
 * @package Freedom
 */
require_once ('Invoice.php');
/**
 * This class represents an invoice generated by the system. Most of these
 * are monthly-billing contract invoices, but they can also be loaner
 * invoices or shipping invoices.
 *
 * @author Aron Vargas
 * @package Freedom
 */
class GenerateInvoice extends Invoice {
    /**
     * The database ID
     *
     * @var int
     */
    protected $id = null;

    /**
     * The ID of the batch that contains this invoice
     *
     * @var int
     */
    protected $batch_id = null;

    /**
     * The ID of the contract from which this invoice was generated
     *
     * @var int
     */
    protected $contract_id = null;

    /**
     * The type of invoice which will be something like "stub", "full",
     * "loaner", or "shipping"
     *
     * @var string
     */
    protected $invoice_type = '';

    /**
     * The proportion of a month that should be billed
     *
     * @var float
     */
    protected $pro_rate = null;

    /**
     * The payment terms (usually "Net 30")
     *
     * @var string
     */
    protected $payment_term = null;

    /**
     * The date that payment for this invoice is due
     *
     * @var DateTime
     */
    protected $due_date = null;

    /**
     * TranType:
     *  501 = invoice
     *  502 = credit
     *
     * @var int
     */
    protected $tran_type = null;

    /**
     * The invoice comment
     *
     * @var string
     */
    protected $comment = '';


    /**
     * Constructor
     *
     * Takes an invoice ID and loads the database record into this object
     *
     * @param int $invoice_id
     * @throws PDOException, Exception
     */
    public function __construct($invoice_id)
    {
        $this->id = $invoice_id;
        $this->load();
    }

    /**
     * Returns the contents of this object as a readable string
     *
     * @return string
     */
    public function __toString()
    {
        $ret = '';
        $properties = get_object_vars($this);
        ksort($properties);
        foreach ($properties as $key => $val)
        {
            if ($key == 'line_items')
            {
                $ret .= "$key:" . PHP_EOL;
                $ret .= sprintf('%8s | %15s | %25s | %3s | %10s | %3s' . PHP_EOL,
                    'inv id', 'item code', 'item desc', 'qty', 'unit price', 'uom');

                foreach ($val as $line_item)
                {
                    $ret .= (string) $line_item . PHP_EOL;
                }
            }
            elseif ($val instanceof DateTime)
            {
                $ret .= "$key: " . $val->format('c') . PHP_EOL;
            }
            elseif (is_bool($val))
            {
                $ret .= "$key: " . ($val ? 'true' : 'false') . PHP_EOL;
            }
            else
            {
                $ret .= "$key: $val" . PHP_EOL;
            }
        }

        return $ret;
    }

    /**
     * Adds a line item to this invoice
     *
     * @param InvoiceLineItem $line_item
     * @throws Exception
     */
    public function addLineItem($line_item)
    {
        if ($line_item instanceof InvoiceLineItem)
            $this->line_items[] = $line_item;
        else
            throw new Exception('could not add line item because it is not an InvoiceLineItem');
    }

    /**
     * Returns the {@link InvoiceBatch} ID for this invoice
     *
     * @return int
     */
    public function getBatchId()
    {
        return $this->batch_id;
    }

    /**
     * Returns the comment for this invoice
     *
     * @return string
     */
    public function getComment()
    {
        return $this->comment;
    }

    /**
     * Returns the contract ID for this invoice
     *
     * @return int
     */
    public function getContractId()
    {
        return $this->contract_id;
    }

    /**
     * Returns the due date for this invoice
     *
     * @return int epoch time
     */
    public function getDueDate()
    {
        if ($this->due_date)
            return $this->due_date->getTimestamp();

        return null;
    }

    /**
     * Returns the ID of this invoice
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns the type of this invoice
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->invoice_type;
    }

    /**
     * Returns the payment term for this invoice
     *
     * @return string
     */
    public function getPaymentTerm()
    {
        return $this->payment_term;
    }

    /**
     * Returns the prorate (the pro-rated number of months) for this invoice
     *
     * @return float
     */
    public function getProrate()
    {
        return $this->pro_rate;
    }

    /**
     * Returns the TranType of this invoice
     *
     * @return int
     */
    public function getTranType()
    {
        return $this->tran_type;
    }

    /**
     * Loads the database record into this object
     *
     * @throws PDOException, Exception
     */
    protected function load()
    {
        $dbh = DataStor::getHandle();
        $sth = $dbh->prepare('
			SELECT batch_id,
			       contract_id,
			       cust_id,
			       due_date,
			       invoice_date,
			       comment,
			       tran_type,
			       sales_amt,
			       invoice_type,
			       pro_rate,
			       payment_term
			FROM invoice_generated
			WHERE id = ?');
        $sth->bindValue(1, $this->id, PDO::PARAM_INT);
        $sth->execute();
        if ($sth->rowCount() > 0)
        {
            $inv_row = $sth->fetch(PDO::FETCH_ASSOC);
            $this->batch_id = $inv_row['batch_id'];
            $this->contract_id = $inv_row['contract_id'];
            $this->invoice_type = $inv_row['invoice_type'];
            $this->invoice_date = new DateTime($inv_row['invoice_date']);
            $this->tran_type = $inv_row['tran_type'];
            $this->due_date = (is_null($inv_row['due_date'])) ? null : new DateTime($inv_row['due_date']);
            $this->payment_term = $inv_row['payment_term'];
            $this->pro_rate = $inv_row['pro_rate'];
            $this->total_product_cost = $inv_row['sales_amt'];
            $this->comment = $inv_row['comment'];

            $this->customer_id = Facility::getIdFromCustId($inv_row['cust_id']);
            if (is_null($this->customer_id))
                throw new Exception('invoice with id=' . $this->id . ' has an invalid cust ID');

            # For performance reasons, we do the InvoiceLineItem object
            # creation in a batch process.  We run the query for the line
            # items here and then pass the results to a static function in
            # the InvoiceLineItem class which creates the objects from
            # the data in the array.
            #
            $sth_li = $dbh->prepare('
				SELECT ' . $this->id . ' AS invoice_id,
				       item_id AS item_code,
				       description AS item_desc,
				       qty AS quantity,
				       unit_price,
				       uom
				FROM invoice_generated_line_items
				WHERE invoice_id = ?
				ORDER BY item_id');
            $sth_li->bindValue(1, $this->id, PDO::PARAM_INT);
            $sth_li->execute();
            $items = $sth_li->fetchAll(PDO::FETCH_ASSOC);
            $this->line_items = InvoiceLineItem::createInvoiceLineItemArray($items);
        }
        else
        {
            throw new Exception('no invoice record with id ' . $this->id);
        }
    }

    /**
     * Updates the database record with the contents of this object
     *
     * @throws PDOException, Exception
     */
    public function save()
    {
        $due_date = (is_null($this->due_date)) ? null : $this->due_date->format('Y-m-d');
        $due_date_type = (is_null($this->$due_date)) ? PDO::PARAM_NULL : PDO::PARAM_STR;

        $dbh = DataStor::getHandle();
        $sth = $dbh->prepare('
			UPDATE invoice_generated
			SET batch_id = ?,
			    contract_id = ?,
			    cust_id = ?,
			    due_date = ?,
			    invoice_date = ?,
			    comment = ?,
			    tran_type = ?,
			    sales_amt = ?,
			    invoice_type = ?,
			    pro_rate = ?,
			    payment_term = ?,
			WHERE id = ?');
        $sth->bindValue(1, $this->batch_id, PDO::PARAM_INT);
        $sth->bindValue(2, $this->contract_id, PDO::PARAM_INT);
        $sth->bindValue(3, $this->customer_id, PDO::PARAM_INT);
        $sth->bindValue(4, $due_date, $due_date_type);
        $sth->bindValue(5, $this->invoice_date->format('Y-m-d'), PDO::PARAM_STR);
        $sth->bindValue(6, $this->comment, PDO::PARAM_STR);
        $sth->bindValue(7, $this->tran_type, PDO::PARAM_INT);
        $sth->bindValue(8, $this->total_product_cost);
        $sth->bindValue(9, $this->invoice_type, PDO::PARAM_STR);
        $sth->bindValue(10, $this->pro_rate);
        $sth->bindValue(11, $this->payment_term, PDO::PARAM_STR);
        $sth->bindValue(12, $this->id, PDO::PARAM_INT);
        if (!$sth->execute())
        {
            $err_info = $sth->errorInfo();
            throw new Exception('could not update invoice record: ' . $err_info[2]);
        }
    }

    /**
     * Creates a new Invoice based on a lease/purchase contract
     *
     * @param int $batch_id
     * @param int $contract_id
     * @param string $invoice_date
     * @param string $invoice_type
     * @param int $tran_type
     * @param string $start_date
     * @param string $end_date
     * @param string $comment
     * @return Invoice
     * @throws PDOException, Exception
     */
    public static function createContractInvoice(
        $batch_id, $contract_id, $invoice_date, $invoice_type,
        $tran_type, $start_date, $end_date, $comment)
    {
        $default_payment_terms = 'Net 30';

        # Set the invoice date
        #
        $inv_dt = new DateTime($invoice_date);

        $dbh = DataStor::getHandle();

        $sth_contract = $dbh->prepare("
			SELECT c.id_facility AS facility_id,
			       f.accounting_id AS cust_id,
			       c.payment_term_id,
			       pt.term_disp,
			       '" . $inv_dt->format('Y-m-d') . "'::DATE + pt.term_due::INTERVAL AS due_date,
			       c.sale_amount,
				   c.id_contract_type
			FROM contract c
			  INNER JOIN facilities f ON c.id_facility = f.id
			  INNER JOIN contract_payment_term pt ON c.payment_term_id = pt.id
			WHERE c.id_contract = ?");
        $sth_contract->bindValue(1, $contract_id, PDO::PARAM_INT);
        $sth_contract->execute();
        $contract_info = $sth_contract->fetch(PDO::FETCH_ASSOC);

        $due_dt = new DateTime($contract_info['due_date']);

        $payment_terms = ($tran_type == INV_TRAN_TYPE) ?
        $contract_info['term_disp'] :
            $default_payment_terms;

        # Calculate the charge amount from the start and end dates
        #
        $start_dt = new DateTime($start_date);
        $end_dt = new DateTime($end_date);
        $sales_amt = self::calcProrate($start_dt, $end_dt, $contract_info['sale_amount']);

        # Calculate the rate (percentage) at which this amount was charged
        $prorate = $sales_amt / $contract_info['sale_amount'];

        # Get the sales amount (the total charge) from the contract.
        # The sales amount is positive or negative depending on whether it's
        # an invoice or credit.
        $flow = ($tran_type == INV_TRAN_TYPE) ? 1 : -1;
        $sales_amt = round($sales_amt * $flow, 4);

        # Insert the new invoice record
        #
        $sth = $dbh->prepare('
			INSERT INTO invoice_generated (
			  batch_id,contract_id,cust_id,due_date,invoice_date,comment,
			  tran_type,sales_amt,invoice_type,pro_rate,payment_term)
			VALUES (?,?,?,?,?,?,?,?,?,?,?)');
        $sth->bindValue(1, $batch_id, PDO::PARAM_INT);
        $sth->bindValue(2, $contract_id, PDO::PARAM_INT);
        $sth->bindValue(3, $contract_info['cust_id'], PDO::PARAM_STR);
        $sth->bindValue(4, $due_dt->format('Y-m-d'), PDO::PARAM_STR);
        $sth->bindValue(5, $inv_dt->format('Y-m-d'), PDO::PARAM_STR);
        $sth->bindValue(6, $comment, PDO::PARAM_STR);
        $sth->bindValue(7, $tran_type, PDO::PARAM_INT);
        $sth->bindValue(8, $sales_amt);
        $sth->bindValue(9, $invoice_type, PDO::PARAM_STR);
        $sth->bindValue(10, $prorate);
        $sth->bindValue(11, $payment_terms, PDO::PARAM_STR);
        if ($sth->execute())
        {
            $new_id = $dbh->lastInsertId('invoice_generated_id_seq');

            $amount_fld = "ci.amount";
            ## Only set warranty amount for purchase line items
            if ($contract_info['id_contract_type'] == LeaseContract::$PURCHASE_TYPE)
                $amount_fld = "CASE ci.item_code WHEN 'SRV-WARRANTY' THEN ci.amount ELSE 0.0 END";

            # For the sake of performance, we create the line items directly
            # in the database via an INSERT/SELECT query
            #
            $dbh->exec("
			INSERT INTO invoice_generated_line_items
				(invoice_id, item_id, description, qty, unit_price, uom)
			SELECT
				$new_id, trim(ci.item_code), p.name,
				COUNT(ci.*), AVG($amount_fld), 'EA'
			FROM contract_line_item ci
			INNER JOIN products p ON ci.item_code = p.code
			AND (ci.date_removed IS NULL OR ci.date_removed > CURRENT_DATE)
			WHERE ci.contract_id = $contract_id
			GROUP BY 1, 2, 3, 6");

            $new_invoice = new Invoice($new_id);
            return $new_invoice;
        }
        else
        {
            $err_info = $sth->errorInfo();
            throw new Exception('could not insert new invoice record: ' . $err_info[2]);
        }
    }

    /**
     * Creates a new Invoice based on a loaner contract. May return null
     * if the invoice has no line items or a sale amount of 0.
     *
     * @param int $batch_id
     * @param int $contract_id
     * @param string $invoice_date
     * @param string $invoice_type
     * @param int $tran_type
     * @param string $start_date first day of the billing window
     * @param string $end_date last day of the billing window (inclusive)
     * @return Invoice|null
     * @throws PDOException, Exception
     */
    public static function createLoanerInvoice(
        $batch_id, $contract_id, $invoice_date, $invoice_type,
        $tran_type, $start_date, $end_date)
    {
        $default_payment_terms = 'Net 30';

        $dbh = DataStor::getHandle();

        # Get the default loaner charge (used if the daily rate in the
        # loaner agreement is null)
        #
        $conf = new TConfig();
        $default_loaner_charge_per_day = (float) $conf->get('loaner_charge_per_day');

        # Create the DateTime objects we'll need later
        #
        $inv_dt = new DateTime($invoice_date);
        $start_dt = new DateTime($start_date);
        $end_dt = new DateTime($end_date);

        # Create a contract object
        #
        $contract = new LoanerContract($contract_id);

        # Get the cust id from the contract object
        #
        $customer_entity_id = $contract->getVar('id_facility');
        $customer = new CustomerEntity($customer_entity_id);
        $cust_id = $customer->getCustId();

        # Get the payment terms from the contract object
        #
        $payment_terms = ($tran_type == INV_TRAN_TYPE) ?
            $contract->getPaymentTerms() :
            $default_payment_terms;

        # Query to get the due date given the invoice date and payment terms
        #
        $sth_due_date = $dbh->query("
			SELECT '" . $inv_dt->format('Y-m-d') . "'::DATE + term_due::INTERVAL
			FROM contract_payment_term
			WHERE term_disp = " . $dbh->quote($payment_terms));
        $due_dt = new DateTime($sth_due_date->fetchColumn());

        # Get the hex version of the contract id and generate the comment
        #
        $hex_contract_id = ($contract_id < 0) ? '-' . dechex(-1 * $contract_id) : dechex($contract_id);
        $bill_or_credit = ($tran_type == INV_TRAN_TYPE) ? 'Billing' : 'Credit';
        $comment = "Loaner $bill_or_credit " . $start_dt->format('m/d/y') . '-' . $end_dt->format('m/d/y') . "|$hex_contract_id:" . $batch_id;

        # Get the equipment from the contract and create an array that
        # has key/value pairs of item => [qty => X, desc => 'foo']
        #
        $device_line_items = array();
        $num_devices = 0;
        $sth_li = $dbh->prepare("
		SELECT
			p.code AS item_code,
			p.description AS item_desc,
			1 as quantity,
			cem.item_code AS contract_item_code,
			la.daily_rate
		FROM contract_line_item cem
		INNER JOIN service_item_to_product sitp ON cem.item_code = sitp.code AND sitp.loanable
		INNER JOIN products p ON sitp.loaner_item = p.code
		LEFT OUTER JOIN loaner_agreement la
		  ON cem.contract_id = la.contract_id
		  AND la.active = true
		WHERE cem.contract_id = ?
		AND (cem.date_removed IS NULL OR cem.date_removed > CURRENT_DATE)");
        $sth_li->bindValue(1, $contract_id, PDO::PARAM_INT);
        $sth_li->execute();
        while ($row = $sth_li->fetch(PDO::FETCH_ASSOC))
        {
            if (!is_null($row['item_code']))
            {
                if (!isset ($device_line_items[$row['item_code']]))
                {
                    $device_line_items[$row['item_code']] = array(
                        'quantity' => 0, 'desc' => '', 'rate' => 0
                    );
                }

                $device_line_items[$row['item_code']]['quantity'] += $row['quantity'];
                $device_line_items[$row['item_code']]['desc'] = $row['item_desc'];
                $device_line_items[$row['item_code']]['rate'] = is_null($row['daily_rate']) ?
                    $default_loaner_charge_per_day :
                $row['daily_rate'];

                $num_devices += $row['quantity'];
            }
            else
            {
                $device_line_items[$row['contract_item_code']] = array('quantity' => 0, 'desc' => 'MISSING LNR CODE');
            }
        }

        # Get the number of days for which we bill
        #
        $diff = $end_dt->diff($start_dt);
        $num_days = $diff->days + 1;

        # Calculate the sales amount. The sales amount is positive or
        # negative depending on whether it's an invoice or credit.
        #
        $flow = ($tran_type == INV_TRAN_TYPE) ? 1 : -1;
        $sales_amt = 0;
        foreach ($device_line_items as $dli)
        {
            $sales_amt += round($dli['quantity'] * $dli['rate'] * $num_days * $flow, 4);
        }

        # Only generate the invoice if there is at least one line item
        # and the amount is non-zero
        #
        if (count($device_line_items) > 0 && $sales_amt != 0)
        {
            # Insert the new invoice record
            #
            $sth = $dbh->prepare('
				INSERT INTO invoice_generated (
				  batch_id,contract_id,cust_id,due_date,invoice_date,comment,
				  tran_type,sales_amt,invoice_type,pro_rate,payment_term)
				VALUES (?,?,?,?,?,?,?,?,?,?,?)');
            $sth->bindValue(1, $batch_id, PDO::PARAM_INT);
            $sth->bindValue(2, $contract_id, PDO::PARAM_INT);
            $sth->bindValue(3, $cust_id, PDO::PARAM_STR);
            $sth->bindValue(4, $due_dt->format('Y-m-d'), PDO::PARAM_STR);
            $sth->bindValue(5, $inv_dt->format('Y-m-d'), PDO::PARAM_STR);
            $sth->bindValue(6, $comment, PDO::PARAM_STR);
            $sth->bindValue(7, $tran_type, PDO::PARAM_INT);
            $sth->bindValue(8, $sales_amt);
            $sth->bindValue(9, $invoice_type, PDO::PARAM_STR);
            $sth->bindValue(10, 1);
            $sth->bindValue(11, $payment_terms, PDO::PARAM_STR);
            if ($sth->execute())
            {
                $new_id = $dbh->lastInsertId('invoice_generated_id_seq');
                $new_invoice = new Invoice($new_id);

                # Create the line items
                #
                foreach ($device_line_items as $item_code => $dli)
                {
                    $unit_price = round($dli['rate'] * $num_days, 4);

                    $new_invoice->addLineItem(
                        InvoiceLineItem::createInvoiceLineItem(
                            $new_id, $item_code, $dli['desc'] . " ($num_days days)",
                            $dli['quantity'], $unit_price, 'EA'
                        )
                    );
                }

                return $new_invoice;
            }
            else
            {
                $err_info = $sth->errorInfo();
                throw new Exception('could not insert new invoice record: ' . $err_info[2]);
            }
        }

        return null;
    }

    /**
     * Creates a new Invoice for the shipping charge on a contract
     *
     * @param int $batch_id
     * @param LeaseContract $contract
     * @param string $invoice_date
     * @param string $invoice_type
     * @param float $shipping_charge
     * @return Invoice
     * @throws PDOException, Exception
     */
    public static function createShippingInvoice(
        $batch_id, $contract, $invoice_date, $invoice_type, $shipping_charge)
    {
        $dbh = DataStor::getHandle();

        # Set some of the known values
        #
        $payment_terms = 'Net 30';
        $item_code = 'Z-SHIPPING';
        $item_desc = 'Freight Out';
        $qty = 1;

        # Set the invoice date
        #
        $inv_dt = new DateTime($invoice_date);

        # Query to get the due date given the invoice date and payment terms
        #
        $sth_due_date = $dbh->query("
			SELECT '" . $inv_dt->format('Y-m-d') . "'::DATE + term_due::INTERVAL
			FROM contract_payment_term
			WHERE term_disp = " . $dbh->quote($payment_terms));
        $due_dt = new DateTime($sth_due_date->fetchColumn());

        # Get the cust id from the contract object
        #
        $customer_entity_id = $contract->getVar('id_facility');
        $customer = new CustomerEntity($customer_entity_id);
        $cust_id = $customer->getCustId();

        $comment = "Shipping Cost for Contract {$contract->getVar('id_contract')}";

        # Insert the new invoice record
        #
        $sth = $dbh->prepare('
			INSERT INTO invoice_generated (
			  batch_id,contract_id,cust_id,due_date,invoice_date,comment,
			  tran_type,sales_amt,invoice_type,pro_rate,payment_term)
			VALUES (?,?,?,?,?,?,?,?,?,?,?)');
        $sth->bindValue(1, $batch_id, PDO::PARAM_INT);
        $sth->bindValue(2, $contract->getVar('id_contract'), PDO::PARAM_INT);
        $sth->bindValue(3, $cust_id, PDO::PARAM_STR);
        $sth->bindValue(4, $due_dt->format('Y-m-d'), PDO::PARAM_STR);
        $sth->bindValue(5, $inv_dt->format('Y-m-d'), PDO::PARAM_STR);
        $sth->bindValue(6, $comment, PDO::PARAM_STR);
        $sth->bindValue(7, INV_TRAN_TYPE, PDO::PARAM_INT);
        $sth->bindValue(8, $shipping_charge);
        $sth->bindValue(9, $invoice_type, PDO::PARAM_STR);
        $sth->bindValue(10, 1);
        $sth->bindValue(11, $payment_terms, PDO::PARAM_STR);
        if ($sth->execute())
        {
            $new_id = $dbh->lastInsertId('invoice_generated_id_seq');
            $new_invoice = new Invoice($new_id);

            # Add the line item for the shipping charge
            #
            $new_invoice->addLineItem(
                InvoiceLineItem::createInvoiceLineItem(
                    $new_id, $item_code, $item_desc,
                    $qty, $shipping_charge, 'EA'
                )
            );

            return $new_invoice;
        }
        else
        {
            $err_info = $sth->errorInfo();
            throw new Exception('could not insert new invoice record: ' . $err_info[2]);
        }
    }

    /**
     * Calculate the full charge amount from the start time to an end time.
     * Each months daily rate is based on the number of days in the month.
     * This is calculated in 3 chucks.
     *
     * 1) Add first month prorated. Start date to end. "End" is the end date or end of the month.
     *
     * 2) Add full month charges. Skips the first and last month.
     * Used when date range spans across at least 3 months
     *
     * 3) Add remainder of the last month.
     * Used when the end date past the start month. Almost always the case since we bill from MM/30 to MM+1/30
     *
     * @param DateTime $start_dt the start time
     * @param DateTime $end_dt the end time
     * @param float the monthly charge amount
     * @return float the proportion of time
     */
    static public function calcProrate($start_dt, $end_dt, $month_rate)
    {
        $debug = false;

        # Get Initial date information for the start and end dates
        list($s_month, $s_day_of_month, $s_days_in_month) = explode('|', $start_dt->format('n|j|t'));
        list($e_month, $e_day_of_month, $e_days_in_month) = explode('|', $end_dt->format('n|j|t'));

        ## Determine the stopping point of the first month
        $first_month_end = ($s_month == $e_month) ? $e_day_of_month : $s_days_in_month;

        ## debug code
        if ($debug)
            echo "::calcProrate Chunk 1 $month_rate * ($first_month_end - $s_day_of_month) / $s_days_in_month \n";
        ## Get the initial amount for the remainder of the first month
        $pro_rate = $month_rate * ($first_month_end - $s_day_of_month + 1) / $s_days_in_month;

        ## debug code
        if ($debug)
            echo "::calcProrate pro_rate = $pro_rate\n";

        ## Add the number of full months. This will not include the ends (first and last months)
        ## just the full months in between.
        if ($e_month < $s_month)
            $e_month += 12;

        if ($e_month > $s_month)
        {
            if ($debug)
                echo "::calcProrate Chunk 2 From ($e_month - $s_month - 1) * $month_rate\n";

            $pro_rate += ($e_month - $s_month - 1) * $month_rate;

            if ($debug)
                echo "::calcProrate pro_rate = $pro_rate\n";

            ## Add the remainder of the last month, if any
            if ($debug)
                echo "::calcProrate Chunk 2 for $month_rate * $e_day_of_month / $e_days_in_month\n";

            $pro_rate += $month_rate * $e_day_of_month / $e_days_in_month;

            if ($debug)
                echo "::calcProrate pro_rate = $pro_rate\n";
        }

        return $pro_rate;
    }
}

?>